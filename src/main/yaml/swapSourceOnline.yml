incarnation: scafi

variables:
  # SIMULATION VARIABLE
  last_greedy_episodes: { formula: 3.0 }
  learning_episodes: { formula: 50.0 }
  episodes: &episodes { formula: 'learning_episodes + last_greedy_episodes' }
  greedy_each: { formula: learning_episodes }
  episode: &episode { min: 0, max: *episodes, step: 1, default: 0 }
  episode_length: &episode_length { formula: 150 }
  learn: &learn
    language: scala
    formula: >
      val ep = episode.asInstanceOf[java.lang.Double].intValue;
      val each = greedy_each.asInstanceOf[java.lang.Double].intValue;
      val learn_ep = learning_episodes.asInstanceOf[java.lang.Double].intValue;
      learn_ep != 0 && (ep == 0 || ep % each != 0) && ep < learn_ep
  range: &range { formula: 8.0 }
  initial_value: &initial_value { formula: 0.0 }
  gamma: &gamma { formula: 0.99 }
  window_size: &window_size { formula: 3 }
  trajectory_size: &trajectory_size { formula: 2 }
  qtable_folder: &qtable_folder { formula: "'\"qtables\"'" }
  clock_folder: &clock_folder { formula: "'\"clock\"'" }
  right_source: &right_source { formula: 'learn ? 0 : 39'}
  left_source: &left_source { formula: 'learn ? 39 : 0' }
  # PROGRAM VARIABLES
  stop_right_source: &stop_right_source { formula: 50 }

## Time variables
_alpha: &alpha >
  it.unibo.learning.TimeVariable.exponentialDecayFunction(0.5, 25)
_beta: &beta >
  it.unibo.learning.TimeVariable.exponentialDecayFunction(0.05, 25)
_epsilon: &epsilon >
  it.unibo.learning.TimeVariable.exponentialDecayFunction(0.01, 30)

_actions: &actions >
  cats.data.NonEmptySet.of(0, 1, 2)

seeds: { scenario: 0, simulation: 0 } # put episode to make round firing different
terminate: { type: AfterTime, parameters: [*episode_length] }
environment: { type: Continuous2DEnvironment }
network-model: { type: ConnectWithinDistance, parameters: [*range] }
deployments:
  - type: Grid
    parameters: [0, 0, 200, 5, 5, 5, 0.5, 0.5, 0.0, 0.0] #large
    programs:
      - time-distribution: 1
        type: Event
        actions: { type: RunScafiProgram, parameters: [it.unibo.scafi.casestudy.SwapSourceOnline, 5.0] }
      - program: send

    contents:
      - molecule: range
        concentration: *range
      - molecule: classicHopCount
        concentration: 0
      - molecule: rlbasedHopCount
        concentration: 0
      - molecule: err_oldRl
        concentration: 0
      - molecule: refG
        concentration: 0
      - molecule: err_classicHopCount
        concentration: 0
      - molecule: err_rlbasedHopCount
        concentration: 0
      - molecule: reward
        concentration: 0
      - molecule: learn
        concentration: *learn
      - molecule: episode
        concentration: *episode
      - molecule: stop_right_source
        concentration: *stop_right_source
      - molecule: gamma
        concentration: *gamma
      - molecule: initial_value
        concentration: *initial_value
      - molecule: qtable_folder
        concentration: *qtable_folder
      - molecule: clock_folder
        concentration: *clock_folder
      - molecule: alpha
        concentration: *alpha
      - molecule: beta
        concentration: *beta
      - molecule: epsilon
        concentration: *epsilon
      - molecule: actions
        concentration: *actions
      - molecule: window
        concentration: *window_size
      - molecule: trajectory
        concentration: *trajectory_size
      - molecule: left_source
        concentration: *left_source
      - molecule: right_source
        concentration: *right_source
      - molecule: source
        concentration: false
      - molecule: episode_length
        concentration: *episode_length
      - molecule: overestimate
        concentration: 0
      - molecule: underestimate
        concentration: 0
      - molecule: err_crf
        concentration: 0
      - molecule: err_bis
        concentration: 0
export:
  - time
  - molecule: refG
    aggregators: [mean]
    value-filter: onlyfinite
  - molecule: classicHopCount
    aggregators: [mean]
    value-filter: onlyfinite
  - molecule: rlbasedHopCount
    aggregators: [mean]
    value-filter: onlyfinite
  - molecule: err_classicHopCount
    aggregators: [sum]
    value-filter: onlyfinite
  - molecule: err_rlbasedHopCount
    aggregators: [sum]
    value-filter: onlyfinite
  - molecule: reward
    aggregators: [mean]
    value-filter: onlyfinite
  - molecule: overestimate
    aggregators: [sum]
  - molecule: underestimate
    aggregators: [sum]
  - molecule: err_crf
    value-filter: onlyfinite
    aggregators: [sum]
  - molecule: err_bis
    value-filter: onlyfinite
    aggregators: [sum]
  - molecule: err_oldRl
    value-filter: onlyfinite
    aggregators: [ sum ]